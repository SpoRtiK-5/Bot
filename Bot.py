from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7763998160:AAHCHxNBE7PHKi2dJsMZzUZlsaaJcT9BCV4'
ADMIN_GROUP_ID = -4827726129  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
ADMIN_IDS = [737905673]  # ID –∞–¥–º–∏–Ω–æ–≤, –∫—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

users_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–Ω–∫–µ—Ç
contact_context = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

class Form(StatesGroup):
    name = State()
    age = State()
    hours = State()
    steam_nick = State()
    steam_link = State()
    faceit_link = State()

class ContactForm(StatesGroup):
    message = State()

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É.\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    await Form.name.set()

@dp.message_handler(state=Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await Form.age.set()

@dp.message_handler(state=Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É –≤–∞—Å –≤ –∏–≥—Ä–µ?")
    await Form.hours.set()

@dp.message_handler(state=Form.hours)
async def process_hours(message: Message, state: FSMContext):
    await state.update_data(hours=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Steam:")
    await Form.steam_nick.set()

@dp.message_handler(state=Form.steam_nick)
async def process_steam_nick(message: Message, state: FSMContext):
    await state.update_data(steam_nick=message.text)
    await message.answer("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å:")
    await Form.steam_link.set()

@dp.message_handler(state=Form.steam_link)
async def process_steam_link(message: Message, state: FSMContext):
    await state.update_data(steam_link=message.text)
    await message.answer("–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Faceit –ø—Ä–æ—Ñ–∏–ª—å:")
    await Form.faceit_link.set()

@dp.message_handler(state=Form.faceit_link)
async def process_faceit_link(message: Message, state: FSMContext):
    data = await state.get_data()
    telegram_username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    user_id = message.from_user.id

    users_data[user_id] = {
        'name': data['name'],
        'age': data['age'],
        'hours': data['hours'],
        'steam_nick': data['steam_nick'],
        'steam_link': data['steam_link'],
        'faceit_link': data['faceit_link'],
        'telegram': telegram_username,
        'id': user_id
    }

    text = (
        "üì• –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"‚è± –ß–∞—Å–æ–≤ –≤ –∏–≥—Ä–µ: {data['hours']}\n"
        f"üéÆ –ù–∏–∫ –≤ Steam: {data['steam_nick']}\n"
        f"üîó Steam: {data['steam_link']}\n"
        f"üîó Faceit: {data['faceit_link']}\n"
        f"üì± Telegram: @{telegram_username}"
    )

    await bot.send_message(chat_id=ADMIN_GROUP_ID, text=text)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.message_handler(commands=['list'])
async def show_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    if not users_data:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.")

    for uid, user in users_data.items():
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{uid}")
        )
        user_info = (
            f"üë§ –ò–º—è: {user['name']}\n"
            f"üì± Telegram: @{user['telegram']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
            f"üïπ –ß–∞—Å—ã: {user['hours']}"
        )
        await message.answer(user_info, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è"
@dp.callback_query_handler(Text(startswith="contact_"))
async def contact_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    user_id = int(call.data.split("_")[1])
    contact_context[call.from_user.id] = user_id
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫—É:")
    await ContactForm.message.set()

@dp.message_handler(state=ContactForm.message)
async def send_contact_message(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if admin_id not in contact_context:
        return await message.reply("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    
    target_user_id = contact_context[admin_id]
    text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
    try:
        await bot.send_message(chat_id=target_user_id, text=text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
    await state.finish()
